import { getCurrentLocalTimeAtSpace } from './helpers/space-time-utilities/index';

import ReportAverageMeetingSize from '@density/ui-report-average-meeting-size';
import ReportTimeSegmentBreakdown from '@density/ui-report-time-segment-breakdown';
import ReportTotalVisits from '@density/ui-report-total-visits';
import ReportTotalVisitsRollup from '@density/ui-report-total-visits-rollup';
import ReportDailyVisitsPerSegment from '@density/ui-report-daily-visits-per-segment';
import ReportSurpassedCapacity from '@density/ui-report-surpassed-capacity';
import ReportComparativePerformance from '@density/ui-report-comparative-performance';
import ReportNextWeekForecast from '@density/ui-report-next-week-forecast';
import ReportUtilization from '@density/ui-report-utilization';
import ReportHourlyBreakdown, { ReportHourlyBreakdownProps } from '@density/ui-report-hourly-breakdown';
import ReportWastedSpace from '@density/ui-report-wasted-space';

import averageMeetingSize from './actions/collection/dashboards/report-calculations/average-meeting-size';
import totalVisitsOneSpace from './actions/collection/dashboards/report-calculations/total-visits-one-space';
import totalVisitsRollup from './actions/collection/dashboards/report-calculations/total-visits-rollup';
import dailyVisitsPerSegment from './actions/collection/dashboards/report-calculations/daily-visits-per-segment';
import averageTimeSegmentBreakdown from './actions/collection/dashboards/report-calculations/average-time-segment-breakdown';
import surpassedCapacity from './actions/collection/dashboards/report-calculations/surpassed-capacity';
import comparativePerformance from './actions/collection/dashboards/report-calculations/comparative-performance';
import nextWeekForecast from './actions/collection/dashboards/report-calculations/next-week-forecast';
import utilization from './actions/collection/dashboards/report-calculations/utilization';
import hourlyBreakdown from './actions/collection/dashboards/report-calculations/hourly-breakdown';
import wastedSpace from './actions/collection/dashboards/report-calculations/wasted-space';

type ReportData = any;
type ReportSettings = {
  isExpandable: boolean;
  displayContextWhenExpanded: any;
  displayContextWhenNotExpanded: any;
};
type ReportDefinition = {
  component: React.ComponentClass<any, any>;
  calculations: (any) => Promise<ReportData>;
  settings?: (any) => ReportSettings;
};

// Default report settings if no settings are defined in a report
export const DEFAULT_REPORT_SETTINGS: ReportSettings = {
  isExpandable: false,
  displayContextWhenExpanded: {},
  displayContextWhenNotExpanded: {},
};


// A Report is a small card shaped element rendered to visualize density data.
// There are three concepts that relate to reports:
// - The "report", which is the value returned from the api when we make a request to GET /reports
// or GET /reports/:id
// - The "report data", which is generated by a "report calculation" for the given report type. This
// data contains the values that are used to render the graphs and visualizations within the report.
// - The "report settings", which contains a way to change props passed to a report given parameters
// configured at the time of report render. A great example - two reports can render the same report
// data, but one may be "expanded", and one may not be. This shouldn't be in the "report data",
// since it can change depending on situation the report is rendered in.

// To add new report types, add an entry in the REPORTS structure below, including all the relevant
// keys in the ReportDefinition type above.
const REPORTS: {[key: string]: ReportDefinition} = {
  AVG_MEETING: {
    component: ReportAverageMeetingSize,
    calculations: averageMeetingSize,
  },
  TOTAL_VISITS_ONE_SPACE: {
    component: ReportTotalVisits,
    calculations: totalVisitsOneSpace,
  },
  TOTAL_VISITS_MULTI_SPACE: {
    component: ReportTotalVisitsRollup,
    calculations: totalVisitsRollup,
    settings: ({report, onOpenReportExpandedModal}) => ({
      isExpandable: true,
      displayContextWhenExpanded: {
        showExpandControl: false,
        maximumNumberOfRows: null, /* an unlimited amount of rows */
      },
      displayContextWhenNotExpanded: {
        showExpandControl: true,
        onReportExpand: () => onOpenReportExpandedModal(report),
        maximumNumberOfRows: 7,
      },
    }),
  },
  DAILY_VISITS: {
    component: ReportDailyVisitsPerSegment,
    calculations: dailyVisitsPerSegment,
  },
  TS_BREAKDOWN: {
    component: ReportTimeSegmentBreakdown,
    calculations: averageTimeSegmentBreakdown,
  },
  CAPACITY: {
    component: ReportSurpassedCapacity,
    calculations: surpassedCapacity,
  },
  COMPARE_PERFORMANCE: {
    component: ReportComparativePerformance,
    calculations: comparativePerformance,
  },
  NEXT_WEEK: {
    component: ReportNextWeekForecast,
    calculations: nextWeekForecast,
  },
  UTILIZATION: {
    component: ReportUtilization,
    calculations: utilization,
    settings: ({report, onOpenReportExpandedModal}) => ({
      isExpandable: true,
      displayContextWhenExpanded: {
        showExpandControl: false,
        maximumNumberOfRows: null, /* an unlimited amount of rows */
      },
      displayContextWhenNotExpanded: {
        showExpandControl: true,
        onReportExpand: () => onOpenReportExpandedModal(report),
        maximumNumberOfRows: 7,
      },
    }),
  },
  HOURLY_BREAKDOWN: {
    component: ReportHourlyBreakdown as React.ComponentClass<ReportHourlyBreakdownProps, any>,
    calculations: hourlyBreakdown,
    settings: ({report, reportData, onOpenReportExpandedModal}) => ({
      isExpandable: true,
      displayContextWhenExpanded: {
        showExpandControl: false,
        dataStartTime: getCurrentLocalTimeAtSpace(reportData.data.space).startOf('day'),
        dataEndTime: getCurrentLocalTimeAtSpace(reportData.data.space).endOf('day'),
      },
      displayContextWhenNotExpanded: {
        showExpandControl: true,
        onReportExpand: () => onOpenReportExpandedModal(report),

        dataStartTime: getCurrentLocalTimeAtSpace(reportData.data.space)
          .startOf('day')
          .add(report.settings.hourStart, 'hours'),
        dataEndTime: getCurrentLocalTimeAtSpace(reportData.data.space)
          .startOf('day')
          .add(report.settings.hourEnd, 'hours'),
      },
    }),
  },
  WASTED_SPACE: {
    component: ReportWastedSpace,
    calculations: wastedSpace,
  },
};

export default REPORTS;
